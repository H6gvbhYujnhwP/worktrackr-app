import React, { useState, useEffect } from 'react';
import BillingQueueManager from './BillingQueueManager.jsx';
import ManualBillingProcessor from './ManualBillingProcessor.jsx';
import { DollarSign, FileText, Send, Download, Eye, CheckCircle, Clock, AlertCircle, Settings, Link, Zap, Queue, Edit } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card.jsx';
import { Button } from '@/components/ui/button.jsx';
import { Badge } from '@/components/ui/badge.jsx';
import { Input } from '@/components/ui/input.jsx';
import { Label } from '@/components/ui/label.jsx';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs.jsx';
import BillingQueueManager from './BillingQueueManager.jsx';
import ManualBillingProcessor from './ManualBillingProcessor.jsx';

const XeroIntegration = ({ businessType = 'service' }) => {
  const [xeroConnected, setXeroConnected] = useState(true); // Simulated connection
  const [showInvoiceModal, setShowInvoiceModal] = useState(false);
  const [showManualProcessor, setShowManualProcessor] = useState(false);
  const [selectedTicketData, setSelectedTicketData] = useState(null);
  const [selectedInvoice, setSelectedInvoice] = useState(null);
  const [autoInvoicing, setAutoInvoicing] = useState(true);
  const [activeTab, setActiveTab] = useState('queue');
  const [showManualProcessor, setShowManualProcessor] = useState(false);
  const [selectedTicketForProcessing, setSelectedTicketForProcessing] = useState(null);

  // Sample invoice data
  const [invoices, setInvoices] = useState([
    {
      id: 'INV-001',
      invoiceNumber: 'WTR-2024-001',
      customerName: 'Sarah Johnson',
      customerEmail: 'sarah.johnson@email.com',
      projectName: 'Electrical Safety Inspection',
      amount: 150,
      taxAmount: 30,
      totalAmount: 180,
      status: 'sent',
      dateCreated: '2024-09-14',
      dateDue: '2024-10-14',
      datePaid: null,
      xeroInvoiceId: 'XERO-INV-12345',
      items: [
        { description: 'Electrical Safety Inspection', quantity: 1, rate: 150, amount: 150 }
      ],
      autoGenerated: true
    },
    {
      id: 'INV-002',
      invoiceNumber: 'WTR-2024-002',
      customerName: 'Mike Thompson',
      customerEmail: 'mike.thompson@email.com',
      projectName: 'Socket Installation',
      amount: 200,
      taxAmount: 40,
      totalAmount: 240,
      status: 'paid',
      dateCreated: '2024-09-13',
      dateDue: '2024-10-13',
      datePaid: '2024-09-15',
      xeroInvoiceId: 'XERO-INV-12346',
      items: [
        { description: 'Socket Installation - Kitchen', quantity: 3, rate: 66.67, amount: 200 }
      ],
      autoGenerated: true
    },
    {
      id: 'INV-003',
      invoiceNumber: 'WTR-2024-003',
      customerName: 'Emma Wilson',
      customerEmail: 'emma.wilson@email.com',
      projectName: 'Emergency Call Out',
      amount: 300,
      taxAmount: 60,
      totalAmount: 360,
      status: 'draft',
      dateCreated: '2024-09-15',
      dateDue: '2024-10-15',
      datePaid: null,
      xeroInvoiceId: null,
      items: [
        { description: 'Emergency Call Out - Power Outage', quantity: 1, rate: 300, amount: 300 }
      ],
      autoGenerated: false
    }
  ]);

  // Xero settings
  const [xeroSettings, setXeroSettings] = useState({
    autoCreateInvoices: true,
    autoSendInvoices: false,
    defaultPaymentTerms: 30,
    taxRate: 20,
    defaultAccount: 'Sales',
    invoiceTemplate: 'Standard',
    emailTemplate: 'Professional'
  });

  const getStatusColor = (status) => {
    switch (status) {
      case 'paid': return 'bg-green-100 text-green-800 border-green-200';
      case 'sent': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'draft': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'overdue': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'paid': return <CheckCircle className="w-4 h-4" />;
      case 'sent': return <Send className="w-4 h-4" />;
      case 'draft': return <FileText className="w-4 h-4" />;
      case 'overdue': return <AlertCircle className="w-4 h-4" />;
      default: return <Clock className="w-4 h-4" />;
    }
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString('en-GB', {
      day: 'numeric',
      month: 'short',
      year: 'numeric'
    });
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-GB', {
      style: 'currency',
      currency: 'GBP'
    }).format(amount);
  };

  const calculateTotals = () => {
    const totalRevenue = invoices.reduce((sum, inv) => sum + inv.totalAmount, 0);
    const paidAmount = invoices.filter(inv => inv.status === 'paid').reduce((sum, inv) => sum + inv.totalAmount, 0);
    const outstandingAmount = invoices.filter(inv => inv.status === 'sent').reduce((sum, inv) => sum + inv.totalAmount, 0);
    const draftAmount = invoices.filter(inv => inv.status === 'draft').reduce((sum, inv) => sum + inv.totalAmount, 0);
    
    return { totalRevenue, paidAmount, outstandingAmount, draftAmount };
  };

  const totals = calculateTotals();

  const handleCreateInvoice = (bookingData) => {
    // Simulate auto-invoice creation from booking
    const newInvoice = {
      id: `INV-${String(invoices.length + 1).padStart(3, '0')}`,
      invoiceNumber: `WTR-2024-${String(invoices.length + 1).padStart(3, '0')}`,
      customerName: bookingData.customerName,
      customerEmail: bookingData.customerEmail,
      projectName: bookingData.service,
      amount: bookingData.price,
      taxAmount: bookingData.price * (xeroSettings.taxRate / 100),
      totalAmount: bookingData.price * (1 + xeroSettings.taxRate / 100),
      status: xeroSettings.autoSendInvoices ? 'sent' : 'draft',
      dateCreated: new Date().toISOString().split('T')[0],
      dateDue: new Date(Date.now() + xeroSettings.defaultPaymentTerms * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      datePaid: null,
      xeroInvoiceId: xeroSettings.autoCreateInvoices ? `XERO-INV-${Date.now()}` : null,
      items: [
        { description: bookingData.service, quantity: 1, rate: bookingData.price, amount: bookingData.price }
      ],
      autoGenerated: true
    };
    
    setInvoices([...invoices, newInvoice]);
  };

  // Handle manual processing
  const handleManualProcessing = (ticketData) => {
    setSelectedTicketForProcessing(ticketData);
    setShowManualProcessor(true);
  };

  const handleManualProcessingComplete = (processedData) => {
    // Handle the completion of manual processing
    console.log('Manual processing completed:', processedData);
    setShowManualProcessor(false);
    setSelectedTicketForProcessing(null);
  };

  const handleManualProcessingCancel = () => {
    setShowManualProcessor(false);
    setSelectedTicketForProcessing(null);
  };

  if (showManualProcessor && selectedTicketForProcessing) {
    return (
      <ManualBillingProcessor
        ticketData={selectedTicketForProcessing}
        onComplete={handleManualProcessingComplete}
        onCancel={handleManualProcessingCancel}
      />
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <Card className="bg-gradient-to-r from-green-50 to-emerald-50 border-green-200">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl text-gray-900 flex items-center">
                <DollarSign className="w-8 h-8 mr-3 text-green-600" />
                Billing Management
              </CardTitle>
              <CardDescription className="text-lg mt-2">
                Comprehensive billing system for all accounting workflows
              </CardDescription>
            </div>
            <div className="flex items-center space-x-3">
              {xeroConnected ? (
                <Badge className="bg-green-100 text-green-800 border-green-200 px-3 py-1">
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Connected to Xero
                </Badge>
              ) : (
                <Button className="bg-blue-600 hover:bg-blue-700">
                  <Link className="w-4 h-4 mr-2" />
                  Connect to Xero
                </Button>
              )}
            </div>
          </div>
        </CardHeader>
      </Card>

      {/* Main Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="queue" className="flex items-center">
            <Queue className="w-4 h-4 mr-2" />
            Billing Queue
          </TabsTrigger>
          <TabsTrigger value="integrations" className="flex items-center">
            <Link className="w-4 h-4 mr-2" />
            Integrations
          </TabsTrigger>
          <TabsTrigger value="invoices" className="flex items-center">
            <FileText className="w-4 h-4 mr-2" />
            Invoices
          </TabsTrigger>
          <TabsTrigger value="manual" className="flex items-center">
            <Edit className="w-4 h-4 mr-2" />
            Manual Processing
          </TabsTrigger>
        </TabsList>

        <TabsContent value="queue" className="space-y-6">
          <BillingQueueManager onManualProcess={handleManualProcessing} />
        </TabsContent>

        <TabsContent value="integrations" className="space-y-6">

      {/* Integration Setup */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Xero Integration */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <DollarSign className="w-5 h-5 mr-2 text-green-600" />
              Xero Integration
            </CardTitle>
            <CardDescription>
              Connect to Xero for automated invoice generation and financial sync
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {xeroConnected ? (
              <div className="space-y-3">
                <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200">
                  <div className="flex items-center">
                    <CheckCircle className="w-5 h-5 text-green-600 mr-2" />
                    <span className="text-sm font-medium text-green-800">Connected to Xero</span>
                  </div>
                  <Button variant="outline" size="sm">Disconnect</Button>
                </div>
                <div className="space-y-2 text-sm text-gray-600">
                  <p>• Automatic invoice creation from completed tickets</p>
                  <p>• Real-time financial data synchronization</p>
                  <p>• Customer and item mapping</p>
                </div>
              </div>
            ) : (
              <div className="space-y-3">
                <Button className="w-full bg-green-600 hover:bg-green-700">
                  <Link className="w-4 h-4 mr-2" />
                  Connect to Xero
                </Button>
                <div className="space-y-2 text-sm text-gray-600">
                  <p>• Secure OAuth 2.0 connection</p>
                  <p>• No sensitive data stored locally</p>
                  <p>• Full control over permissions</p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* QuickBooks Integration */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <FileText className="w-5 h-5 mr-2 text-blue-600" />
              QuickBooks Integration
            </CardTitle>
            <CardDescription>
              Connect to QuickBooks Online for comprehensive accounting integration
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-3">
              <Button className="w-full bg-blue-600 hover:bg-blue-700">
                <Link className="w-4 h-4 mr-2" />
                Connect to QuickBooks
              </Button>
              <div className="space-y-2 text-sm text-gray-600">
                <p>• Automatic invoice and payment tracking</p>
                <p>• Customer and vendor synchronization</p>
                <p>• Tax calculation and reporting</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Ticket-to-Invoice Workflow */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Zap className="w-5 h-5 mr-2 text-yellow-600" />
            Ticket-to-Invoice Workflow
          </CardTitle>
          <CardDescription>
            Configure how completed tickets automatically generate invoices
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Workflow Settings */}
            <div className="space-y-4">
              <h4 className="font-medium text-gray-900">Automation Settings</h4>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Auto-Create Invoices</Label>
                  <p className="text-xs text-gray-600">Create invoices when tickets are completed</p>
                </div>
                <input 
                  type="checkbox" 
                  checked={xeroSettings.autoCreateInvoices}
                  onChange={(e) => setXeroSettings({...xeroSettings, autoCreateInvoices: e.target.checked})}
                  className="rounded border-gray-300"
                />
              </div>
              
              <div className="flex items-center justify-between">
                <div>
                  <Label className="text-sm font-medium">Auto-Send Invoices</Label>
                  <p className="text-xs text-gray-600">Email invoices to customers automatically</p>
                </div>
                <input 
                  type="checkbox" 
                  checked={xeroSettings.autoSendInvoices}
                  onChange={(e) => setXeroSettings({...xeroSettings, autoSendInvoices: e.target.checked})}
                  className="rounded border-gray-300"
                />
              </div>
            </div>
            
            {/* Invoice Settings */}
            <div className="space-y-4">
              <h4 className="font-medium text-gray-900">Invoice Settings</h4>
              
              <div>
                <Label htmlFor="paymentTerms">Payment Terms (days)</Label>
                <Input 
                  id="paymentTerms" 
                  type="number" 
                  value={xeroSettings.defaultPaymentTerms}
                  onChange={(e) => setXeroSettings({...xeroSettings, defaultPaymentTerms: parseInt(e.target.value)})}
                />
              </div>
              
              <div>
                <Label htmlFor="taxRate">Tax Rate (%)</Label>
                <Input 
                  id="taxRate" 
                  type="number" 
                  value={xeroSettings.taxRate}
                  onChange={(e) => setXeroSettings({...xeroSettings, taxRate: parseFloat(e.target.value)})}
                />
              </div>
            </div>
            
            {/* Ticket Mapping */}
            <div className="space-y-4">
              <h4 className="font-medium text-gray-900">Ticket Data Mapping</h4>
              
              <div className="space-y-3 text-sm">
                <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                  <h5 className="font-medium text-blue-900 mb-2">What gets extracted from tickets:</h5>
                  <ul className="space-y-1 text-blue-800">
                    <li>• Customer information (name, email, address)</li>
                    <li>• Service details and descriptions</li>
                    <li>• Time spent and hourly rates</li>
                    <li>• Materials and parts used</li>
                    <li>• Custom field data</li>
                  </ul>
                </div>
                
                <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                  <h5 className="font-medium text-green-900 mb-2">Invoice generation process:</h5>
                  <ul className="space-y-1 text-green-800">
                    <li>• Ticket marked as "Completed"</li>
                    <li>• System extracts billable items</li>
                    <li>• Invoice created in accounting system</li>
                    <li>• Customer automatically notified</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
        </TabsContent>

        <TabsContent value="invoices" className="space-y-6">
          <BillingQueueManager onManualProcess={setShowManualProcessor} />
        </TabsContent>

        <TabsContent value="manual" className="space-y-6">
          {showManualProcessor && (
            <ManualBillingProcessor 
              ticketData={selectedTicketData}
              onClose={() => setShowManualProcessor(false)}
            />
          )}
        </TabsContent>
      </Tabs>

      {/* Legacy Create Invoice Section - keeping for reference */}
      {false && (
      <div className="space-y-6">
      {/* Create Invoice from Ticket */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Create Invoice from Completed Tickets</CardTitle>
              <CardDescription>Select completed tickets to generate invoices</CardDescription>
            </div>
            <Button onClick={() => setShowInvoiceModal(true)} className="bg-blue-600 hover:bg-blue-700">
              <FileText className="w-4 h-4 mr-2" />
              Create Invoice
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {/* Queue Status */}
          <div className="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <Clock className="w-5 h-5 text-blue-600 mr-2" />
                <span className="font-medium text-blue-900">3 completed tickets awaiting invoice creation</span>
              </div>
              <Button variant="outline" size="sm" className="text-blue-600 border-blue-300">
                Process All
              </Button>
            </div>
          </div>

          {/* Completed Tickets Queue */}
          <div className="space-y-4">
            {/* Sample completed tickets */}
            {[
              {
                id: 'TKT-001',
                title: 'Electrical Safety Inspection',
                customer: 'Sarah Johnson',
                customerEmail: 'sarah@email.com',
                completedDate: '2024-09-20',
                estimatedAmount: 180,
                timeSpent: '2.5 hours',
                materials: ['Safety Certificate', 'Testing Equipment'],
                status: 'ready_for_invoice'
              },
              {
                id: 'TKT-002', 
                title: 'Socket Installation - Kitchen',
                customer: 'Mike Thompson',
                customerEmail: 'mike@email.com',
                completedDate: '2024-09-19',
                estimatedAmount: 240,
                timeSpent: '3 hours',
                materials: ['3x Power Sockets', 'Wiring', 'Labor'],
                status: 'ready_for_invoice'
              },
              {
                id: 'TKT-003',
                title: 'Emergency Call Out - Power Outage',
                customer: 'Emma Wilson', 
                customerEmail: 'emma@email.com',
                completedDate: '2024-09-18',
                estimatedAmount: 360,
                timeSpent: '4 hours',
                materials: ['Emergency Service Fee', 'Diagnostic Work'],
                status: 'ready_for_invoice'
              }
            ].map((ticket) => (
              <Card key={ticket.id} className="border-l-4 border-l-orange-500">
                <CardContent className="p-4">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <h4 className="font-semibold text-gray-900">{ticket.id}</h4>
                        <Badge className="bg-orange-100 text-orange-800 border-orange-200">
                          <Clock className="w-3 h-3 mr-1" />
                          Awaiting Invoice
                        </Badge>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600 mb-3">
                        <div>
                          <p><strong>Customer:</strong> {ticket.customer}</p>
                          <p><strong>Service:</strong> {ticket.title}</p>
                          <p><strong>Email:</strong> {ticket.customerEmail}</p>
                        </div>
                        <div>
                          <p><strong>Completed:</strong> {ticket.completedDate}</p>
                          <p><strong>Time Spent:</strong> {ticket.timeSpent}</p>
                          <p><strong>Materials:</strong> {ticket.materials.length} items</p>
                        </div>
                        <div>
                          <p><strong>Estimated Total:</strong> <span className="font-semibold text-green-600">{formatCurrency(ticket.estimatedAmount)}</span></p>
                          <div className="mt-2">
                            <p className="text-xs text-gray-500">Materials:</p>
                            <ul className="text-xs text-gray-600">
                              {ticket.materials.map((material, idx) => (
                                <li key={idx}>• {material}</li>
                              ))}
                            </ul>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2 ml-4">
                      <Button variant="outline" size="sm">
                        <Eye className="w-4 h-4" />
                      </Button>
                      <Button variant="outline" size="sm">
                        <Download className="w-4 h-4" />
                      </Button>
                      {ticket.status === 'ready_for_invoice' && (
                        <Button size="sm" className="bg-blue-600 hover:bg-blue-700">
                          <Send className="w-4 h-4 mr-2" />
                          Create Invoice
                        </Button>
                      )}
                      <Button size="sm" className="bg-green-600 hover:bg-green-700">
                        <Link className="w-4 h-4 mr-2" />
                        Process Manually
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Xero Connection Status */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Settings className="w-5 h-5 mr-2" />
            Xero Connection
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex items-center justify-between p-4 bg-green-50 rounded-lg">
              <div className="flex items-center space-x-3">
                <CheckCircle className="w-6 h-6 text-green-600" />
                <div>
                  <p className="font-medium text-green-900">Connected to Xero</p>
                  <p className="text-sm text-green-700">Last sync: 2 minutes ago</p>
                </div>
              </div>
              <Button variant="outline" size="sm">
                Refresh Connection
              </Button>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <p><strong>Organisation:</strong> WorkTrackr Ltd</p>
                <p><strong>Base Currency:</strong> GBP</p>
                <p><strong>Financial Year:</strong> 2024-2025</p>
              </div>
              <div>
                <p><strong>Invoices Synced:</strong> {invoices.filter(i => i.xeroInvoiceId).length}</p>
                <p><strong>Last Invoice:</strong> {invoices[0]?.invoiceNumber}</p>
                <p><strong>Connection Status:</strong> Active</p>
              </div>
            </div>
            
            {/* Ticket Mapping */}
            <div className="space-y-4">
              <h4 className="font-medium text-gray-900">Ticket Data Mapping</h4>
              
              <div className="space-y-3 text-sm">
                <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
                  <h5 className="font-medium text-blue-900 mb-2">What gets extracted from tickets:</h5>
                  <ul className="space-y-1 text-blue-800">
                    <li>• Customer information (name, email, address)</li>
                    <li>• Service details and descriptions</li>
                    <li>• Time spent and hourly rates</li>
                    <li>• Materials and parts used</li>
                    <li>• Custom field data</li>
                  </ul>
                </div>
                
                <div className="p-3 bg-green-50 rounded-lg border border-green-200">
                  <h5 className="font-medium text-green-900 mb-2">Invoice generation process:</h5>
                  <ul className="space-y-1 text-green-800">
                    <li>• Ticket marked as "Completed"</li>
                    <li>• System extracts billable items</li>
                    <li>• Invoice created in accounting system</li>
                    <li>• Customer automatically notified</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
        </TabsContent>

        <TabsContent value="invoices" className="space-y-6">

      {/* Create Invoice Modal */}
      {showInvoiceModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-3xl max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <CardTitle>Create New Invoice</CardTitle>
              <CardDescription>Generate a new invoice manually</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="customerName">Customer Name</Label>
                  <Input id="customerName" placeholder="Enter customer name" />
                </div>
                <div>
                  <Label htmlFor="customerEmail">Customer Email</Label>
                  <Input id="customerEmail" type="email" placeholder="customer@email.com" />
                </div>
                <div>
                  <Label htmlFor="projectName">Project/Service</Label>
                  <Input id="projectName" placeholder="Description of work" />
                </div>
                <div>
                  <Label htmlFor="invoiceDate">Invoice Date</Label>
                  <Input id="invoiceDate" type="date" defaultValue={new Date().toISOString().split('T')[0]} />
                </div>
              </div>
              
              <div className="border rounded-lg p-4">
                <h4 className="font-medium mb-3">Invoice Items</h4>
                <div className="space-y-3">
                  <div className="grid grid-cols-12 gap-2 text-sm font-medium text-gray-700">
                    <div className="col-span-5">Description</div>
                    <div className="col-span-2">Quantity</div>
                    <div className="col-span-2">Rate</div>
                    <div className="col-span-2">Amount</div>
                    <div className="col-span-1"></div>
                  </div>
                  <div className="grid grid-cols-12 gap-2">
                    <Input className="col-span-5" placeholder="Item description" />
                    <Input className="col-span-2" type="number" defaultValue="1" />
                    <Input className="col-span-2" type="number" placeholder="0.00" />
                    <Input className="col-span-2" type="number" placeholder="0.00" readOnly />
                    <Button variant="outline" size="sm" className="col-span-1">+</Button>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="notes">Notes</Label>
                  <textarea 
                    id="notes" 
                    className="w-full p-2 border border-gray-300 rounded-md" 
                    rows="3"
                    placeholder="Additional notes for the invoice"
                  ></textarea>
                </div>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span>Subtotal:</span>
                    <span>£0.00</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Tax (20%):</span>
                    <span>£0.00</span>
                  </div>
                  <div className="flex justify-between font-bold text-lg">
                    <span>Total:</span>
                    <span>£0.00</span>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center justify-end space-x-3 pt-4">
                <Button variant="outline" onClick={() => setShowInvoiceModal(false)}>
                  Cancel
                </Button>
                <Button variant="outline">
                  Save as Draft
                </Button>
                <Button onClick={() => setShowInvoiceModal(false)}>
                  Create & Send
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
      </div>
      )}

      {/* Create Invoice Modal */}
      {showInvoiceModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-3xl max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <CardTitle>Create New Invoice</CardTitle>
              <CardDescription>Generate a new invoice manually</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="customerName">Customer Name</Label>
                  <Input id="customerName" placeholder="Enter customer name" />
                </div>
                <div>
                  <Label htmlFor="customerEmail">Customer Email</Label>
                  <Input id="customerEmail" type="email" placeholder="customer@email.com" />
                </div>
                <div>
                  <Label htmlFor="projectName">Project/Service</Label>
                  <Input id="projectName" placeholder="Description of work" />
                </div>
                <div>
                  <Label htmlFor="invoiceDate">Invoice Date</Label>
                  <Input id="invoiceDate" type="date" defaultValue={new Date().toISOString().split('T')[0]} />
                </div>
              </div>
              
              <div className="border rounded-lg p-4">
                <h4 className="font-medium mb-3">Invoice Items</h4>
                <div className="space-y-3">
                  <div className="grid grid-cols-12 gap-2 text-sm font-medium text-gray-700">
                    <div className="col-span-5">Description</div>
                    <div className="col-span-2">Quantity</div>
                    <div className="col-span-2">Rate</div>
                    <div className="col-span-2">Amount</div>
                    <div className="col-span-1"></div>
                  </div>
                  <div className="grid grid-cols-12 gap-2">
                    <Input className="col-span-5" placeholder="Item description" />
                    <Input className="col-span-2" type="number" defaultValue="1" />
                    <Input className="col-span-2" type="number" placeholder="0.00" />
                    <Input className="col-span-2" type="number" placeholder="0.00" readOnly />
                    <Button variant="outline" size="sm" className="col-span-1">+</Button>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="notes">Notes</Label>
                  <textarea 
                    id="notes" 
                    className="w-full p-2 border border-gray-300 rounded-md" 
                    rows="3"
                    placeholder="Additional notes for the invoice"
                  ></textarea>
                </div>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span>Subtotal:</span>
                    <span>£0.00</span>
                  </div>
                  <div className="flex justify-between">
                    <span>Tax (20%):</span>
                    <span>£0.00</span>
                  </div>
                  <div className="flex justify-between font-bold text-lg">
                    <span>Total:</span>
                    <span>£0.00</span>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center justify-end space-x-3 pt-4">
                <Button variant="outline" onClick={() => setShowInvoiceModal(false)}>
                  Cancel
                </Button>
                <Button variant="outline">
                  Save as Draft
                </Button>
                <Button onClick={() => setShowInvoiceModal(false)}>
                  Create & Send
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
};

export default XeroIntegration;

