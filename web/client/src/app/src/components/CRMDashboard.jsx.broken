import React, { useState, useEffect, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card.jsx';
import { Button } from '@/components/ui/button.jsx';
import { Input } from '@/components/ui/input.jsx';
import { Badge } from '@/components/ui/badge.jsx';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs.jsx';
import { Textarea } from '@/components/ui/textarea.jsx';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select.jsx';
import { 
  Building2, 
  Users, 
  Coins, 
  Calendar,
  Search,
  Plus,
  Filter,
  Eye,
  Edit,
  Trash2,
  Phone,
  Mail,
  MapPin,
  AlertTriangle,
  TrendingUp,
  X,
  Target,
  Clock,
  Download,
  FileText,
  User
} from 'lucide-react';

// World currencies data
const worldCurrencies = [
  { code: 'GBP', symbol: '£', name: 'British Pound' },
  { code: 'USD', symbol: '$', name: 'US Dollar' },
  { code: 'EUR', symbol: '€', name: 'Euro' },
  { code: 'JPY', symbol: '¥', name: 'Japanese Yen' },
  { code: 'AUD', symbol: 'A$', name: 'Australian Dollar' },
  { code: 'CAD', symbol: 'C$', name: 'Canadian Dollar' },
  { code: 'CHF', symbol: 'Fr', name: 'Swiss Franc' },
  { code: 'CNY', symbol: '¥', name: 'Chinese Yuan' },
  { code: 'SEK', symbol: 'kr', name: 'Swedish Krona' },
  { code: 'NZD', symbol: 'NZ$', name: 'New Zealand Dollar' },
  { code: 'MXN', symbol: '$', name: 'Mexican Peso' },
  { code: 'SGD', symbol: 'S$', name: 'Singapore Dollar' },
  { code: 'HKD', symbol: 'HK$', name: 'Hong Kong Dollar' },
  { code: 'NOK', symbol: 'kr', name: 'Norwegian Krone' },
  { code: 'ZAR', symbol: 'R', name: 'South African Rand' },
  { code: 'INR', symbol: '₹', name: 'Indian Rupee' },
  { code: 'BRL', symbol: 'R$', name: 'Brazilian Real' },
];

// Import central contact database
import { contactDB, CONTACT_STATUS } from '../data/contactDatabase.js';

const mockProductCatalog = [
  {
    id: 1,
    name: 'HVAC Maintenance',
    category: 'Maintenance',
    defaultOurCost: 150.00,
    defaultClientPrice: 300.00,
    defaultQuantity: 1,
    unit: 'service',
    active: true
  },
  {
    id: 2,
    name: 'Electrical Inspection',
    category: 'Inspection',
    defaultOurCost: 80.00,
    defaultClientPrice: 180.00,
    defaultQuantity: 1,
    unit: 'inspection',
    active: true
  },
  {
    id: 3,
    name: 'Plumbing Repair',
    category: 'Repair',
    defaultOurCost: 120.00,
    defaultClientPrice: 250.00,
    defaultQuantity: 1,
    unit: 'job',
    active: true
  }
];

export default function CRMDashboard() {
  const [activeTab, setActiveTab] = useState('customers');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCompany, setSelectedCompany] = useState(null);
  const [editingContact, setEditingContact] = useState(false);
  const [contacts, setContacts] = useState([]);
  const [contactStatistics, setContactStatistics] = useState({});
  const [editingService, setEditingService] = useState(null);
  const [editingProduct, setEditingProduct] = useState(null);
  const [productCatalog, setProductCatalog] = useState(mockProductCatalog);
  const [customerServices, setCustomerServices] = useState({});
  const [contactInfo, setContactInfo] = useState({});
  const [selectedCurrency, setSelectedCurrency] = useState('GBP');
  const [showNewProductForm, setShowNewProductForm] = useState(false);
  const [newProduct, setNewProduct] = useState({
    name: '',
    category: '',
    defaultOurCost: '',
    defaultClientPrice: '',
    unit: '',
    defaultQuantity: 0,
    active: true
  });
  const [alphabetFilter, setAlphabetFilter] = useState('ALL');
  const [serviceNotes, setServiceNotes] = useState({});
  const [renewalDates, setRenewalDates] = useState({});
  const [showNotesModal, setShowNotesModal] = useState(null);
  const [currentNote, setCurrentNote] = useState('');

  // Load contacts from central database on component mount
  useEffect(() => {
    loadContacts();
  }, []);

  const loadContacts = () => {
    const allContacts = contactDB.getAllContacts();
    const stats = contactDB.getStatistics();
    setContacts(allContacts);
    setContactStatistics(stats);
  };

  const getCurrentCurrencySymbol = () => {
    return worldCurrencies.find(c => c.code === selectedCurrency)?.symbol || '£';
  };

  const filteredCompanies = contacts.filter(contact => {
    const matchesSearch = (contact.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (contact.primaryContact || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (contact.email || '').toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesAlphabet = alphabetFilter === 'ALL' || 
                           (contact.name || '').charAt(0).toUpperCase() === alphabetFilter;
    
    return matchesSearch && matchesAlphabet;
  });

  const totalProfit = useMemo(() => {
    return contacts.reduce((total, contact) => {
      return total + (contact.crm?.totalProfit || 0);
    }, 0);
  }, [contacts]);

  const totalRenewals = useMemo(() => {
    return contacts.reduce((total, contact) => {
      return total + (contact.crm?.renewalsCount || 0);
    }, 0);
  }, [contacts]);

  const totalOpportunities = useMemo(() => {
    return contacts.reduce((total, contact) => {
      return total + (contact.crm?.openOppsCount || 0);
    }, 0);
  }, [contacts]);

  // Generate alphabet buttons
  const alphabetLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');

  return (
    <div className="mobile-container p-2 sm:p-6 space-y-4 sm:space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <div className="min-w-0 flex-1 crm-header">
          <h1 className="text-base sm:text-2xl font-bold flex items-center space-x-2 responsive-text">
            <Building2 className="w-4 h-4 sm:w-6 sm:h-6 flex-shrink-0" />
            <span className="break-words leading-tight">Customer Management</span>
          </h1>
          <p className="text-gray-600 mt-1 text-xs sm:text-base leading-tight">Manage customers, track services, and monitor renewals</p>
        </div>
        <Button className="flex items-center space-x-2 w-full sm:w-auto">
          <Plus className="w-4 h-4 flex-shrink-0" />
          <span>Add Customer</span>
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-4 gap-1 sm:gap-4 lg:gap-6">
        <Card className="mobile-card crm-stats-card h-10 sm:h-auto">
          <CardContent className="p-0.5 sm:p-6 h-full flex items-center justify-center">
            <div className="flex flex-col items-center text-center w-full">
              <Building2 className="w-3 h-3 sm:w-8 sm:h-8 text-blue-600 mb-0.5 sm:mb-2" />
              <p className="text-xs sm:text-2xl font-bold leading-none">{contacts.length}</p>
            </div>
          </CardContent>
        </Card>

        <Card className="mobile-card crm-stats-card h-10 sm:h-auto">
          <CardContent className="p-0.5 sm:p-6 h-full flex items-center justify-center">
            <div className="flex flex-col items-center text-center w-full">
              <Coins className="w-3 h-3 sm:w-8 sm:h-8 text-green-600 mb-0.5 sm:mb-2" />
              <p className="text-xs sm:text-2xl font-bold leading-none">{getCurrentCurrencySymbol()}{totalProfit.toLocaleString()}</p>
            </div>
          </CardContent>
        </Card>

        <Card className="mobile-card crm-stats-card h-10 sm:h-auto">
          <CardContent className="p-0.5 sm:p-6 h-full flex items-center justify-center">
            <div className="flex flex-col items-center text-center w-full">
              <AlertTriangle className="w-3 h-3 sm:w-8 sm:h-8 text-orange-600 mb-0.5 sm:mb-2" />
              <p className="text-xs sm:text-2xl font-bold leading-none">{totalRenewals}</p>
            </div>
          </CardContent>
        </Card>

        <Card className="mobile-card crm-stats-card h-10 sm:h-auto">
          <CardContent className="p-0.5 sm:p-6 h-full flex items-center justify-center">
            <div className="flex flex-col items-center text-center w-full">
              <TrendingUp className="w-3 h-3 sm:w-8 sm:h-8 text-purple-600 mb-0.5 sm:mb-2" />
              <p className="text-xs sm:text-2xl font-bold leading-none">{totalOpportunities}</p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-3 text-xs sm:text-sm">
          <TabsTrigger value="customers" className="text-xs sm:text-sm">Customers</TabsTrigger>
          <TabsTrigger value="catalog" className="text-xs sm:text-sm">Product Catalog</TabsTrigger>
          <TabsTrigger value="settings" className="text-xs sm:text-sm">CRM Settings</TabsTrigger>
        </TabsList>

        <TabsContent value="customers" className="space-y-4 sm:space-y-6">
          <Card className="mobile-card">
            <CardHeader className="p-3 sm:p-6">
              <CardTitle className="text-lg sm:text-xl">Customer Management</CardTitle>
              <CardDescription className="text-sm">Manage your customer relationships and track profitability</CardDescription>
            </CardHeader>
            <CardContent className="p-3 sm:p-6">
              <div className="space-y-4 sm:space-y-6">
                <div className="flex flex-col sm:flex-row gap-4">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                    <Input
                      placeholder="Search by company name (starts with)..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10 mobile-input"
                    />
                  </div>
                  <Button className="w-full sm:w-auto">
                    <Plus className="w-4 h-4 mr-2 flex-shrink-0" />
                    <span>Add Customer</span>
                  </Button>
                </div>
                
                {/* Alphabet Navigation - Desktop Only */}
                <div className="hidden lg:block border rounded-lg p-4 bg-gray-50">
                  <div className="flex gap-1 justify-center">
                    <Button
                      variant={alphabetFilter === 'ALL' ? 'default' : 'outline'}
                      size="sm"
                      onClick={() => setAlphabetFilter('ALL')}
                      className="h-8 w-12 text-xs"
                    >
                      ALL
                    </Button>
                    {alphabetLetters.map(letter => {
                      const hasCompanies = contacts.some(contact => 
                        contact.name.charAt(0).toUpperCase() === letter
                      );
                      return (
                        <Button
                          key={letter}
                          variant={alphabetFilter === letter ? 'default' : 'outline'}
                          size="sm"
                          onClick={() => setAlphabetFilter(letter)}
                          disabled={!hasCompanies}
                          className="h-8 w-8 text-xs p-0"
                        >
                          {letter}
                        </Button>
                      );
                    })}
                  </div>
                  <p className="text-sm text-gray-600 mt-2 text-center">
                    Showing {filteredCompanies.length} of {contacts.length} customers
                    {alphabetFilter !== 'ALL' && ` starting with "${alphabetFilter}"`}
                  </p>
                </div>
                
                {filteredCompanies.length === 0 ? (
                  <div className="text-center py-12">
                    <Users className="w-16 h-16 mx-auto text-gray-400 mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">No customers found</h3>
                    <p className="text-gray-600 mb-4">
                      {searchTerm ? 'Try adjusting your search terms' : 'Get started by adding your first customer'}
                    </p>
                    <Button>
                      <Plus className="w-4 h-4 mr-2" />
                      Add Customer
                    </Button>
                  </div>
                ) : (
                  <div className="customer-list space-y-4">
                    {filteredCompanies.map((contact) => (
                      <Card 
                        key={contact.id} 
                        className={`cursor-pointer transition-all hover:shadow-md mobile-card crm-customer-card ${
                          selectedCompany?.id === contact.id ? 'ring-2 ring-blue-500 bg-blue-50' : ''
                        }`}
                        onClick={() => setSelectedCompany(contact)}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-start justify-between">
                            <div className="flex items-start space-x-3 flex-1">
                              <div className="p-2 bg-gray-100 rounded-lg">
                                {contact.type === 'company' ? (
                                  <Building2 className="w-4 h-4 text-gray-600" />
                                ) : (
                                  <User className="w-4 h-4 text-gray-600" />
                                )}
                              </div>
                              <div className="flex-1 min-w-0">
                                <div className="flex flex-col sm:flex-row sm:items-center gap-2">
                                  <h3 className="font-semibold text-base sm:text-lg break-words flex-shrink-0">{contact.name}</h3>
                                  <div className="flex flex-wrap gap-1 sm:gap-2">
                                    <Badge variant={contact.crm?.status === 'active' ? 'default' : 'destructive'} className="text-xs">
                                      {contact.crm?.status || 'Active'}
                                    </Badge>
                                    {(contact.crm?.renewalsCount || 0) > 0 && (
                                      <Badge variant="outline" className="text-orange-600 border-orange-600 text-xs">
                                        {contact.crm.renewalsCount} Renewals Due
                                      </Badge>
                                    )}
                                    {(contact.crm?.openOppsCount || 0) > 0 && (
                                      <Badge variant="outline" className="text-purple-600 border-purple-600 text-xs">
                                        {contact.crm.openOppsCount} Open Opp{contact.crm.openOppsCount > 1 ? 's' : ''}
                                      </Badge>
                                    )}
                                  </div>
                                </div>
                                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-4 text-xs sm:text-sm text-gray-600 mt-2">
                                  <div className="flex items-center space-x-2 min-w-0">
                                    <Users className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                                    <span className="break-words">{contact.primaryContact}</span>
                                  </div>
                                  <div className="flex items-center space-x-2 min-w-0">
                                    <Mail className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                                    <span className="break-all">{contact.email}</span>
                                  </div>
                                  <div className="flex items-center space-x-2 min-w-0">
                                    <Calendar className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                                    <span className="break-words">Next: {contact.crm?.nextCRMEvent || 'Not set'}</span>
                                  </div>
                                  <div className="flex items-center space-x-2 min-w-0">
                                    <Coins className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                                    <span className="font-medium text-green-600 break-words">
                                      {getCurrentCurrencySymbol()}{(contact.crm?.totalProfit || 0).toLocaleString()}
                                    </span>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                )}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="catalog" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Product & Service Catalog</CardTitle>
              <CardDescription>Manage your master template of products and services</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8">
                <p className="text-gray-600">Product catalog functionality coming soon...</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="settings" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>CRM Settings</CardTitle>
              <CardDescription>Configure your CRM preferences and renewal alerts</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="text-center py-8">
                <p className="text-gray-600">CRM settings functionality coming soon...</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Customer Detail Modal */}
      {selectedCompany && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center z-50 p-2 sm:p-4 overflow-y-auto">
          <div className="bg-white rounded-lg shadow-xl w-full max-w-6xl my-4 mobile-modal">
            <div className="p-3 sm:p-6">
              <div className="flex flex-col sm:flex-row sm:items-center justify-between mb-4 sm:mb-6 gap-3">
                <div className="min-w-0 flex-1">
                  <h2 className="text-lg sm:text-2xl font-semibold flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3">
                    <span className="break-words">{selectedCompany.name}</span>
                    <Badge variant={selectedCompany.status === 'Active' ? 'default' : 'destructive'} className="w-fit">
                      {selectedCompany.status}
                    </Badge>
                  </h2>
                  <p className="text-gray-600 mt-1 text-sm sm:text-base">Customer Details & Service Overview</p>
                </div>
                <Button variant="ghost" onClick={() => setSelectedCompany(null)} className="self-start sm:self-center">
                  <X className="w-4 h-4" />
                </Button>
              </div>
              
              <div className="text-center py-8">
                <p className="text-gray-600">Customer detail functionality coming soon...</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
