import React, { useState } from 'react';
import { useSimulation } from '../App.jsx';
import { Button } from '@/components/ui/button.jsx';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card.jsx';
import { Badge } from '@/components/ui/badge.jsx';
import { Input } from '@/components/ui/input.jsx';
import { Label } from '@/components/ui/label.jsx';
import { Textarea } from '@/components/ui/textarea.jsx';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select.jsx';
import { Alert, AlertDescription } from '@/components/ui/alert.jsx';
import { 
  X, 
  User, 
  Clock, 
  MapPin, 
  MessageSquare, 
  Send, 
  UserCheck, 
  ArrowRight,
  CheckCircle,
  AlertTriangle,
  Settings,
  ChevronDown,
  Mail
} from 'lucide-react';
import { ticketStatuses, priorities, categories } from '../data/mockData.js';

export default function TicketDetailModal({ ticket, users, currentUser, onClose }) {
  console.log('TicketDetailModal rendering with:', { ticket, users, currentUser });
  
  if (!ticket) {
    console.error('No ticket provided to TicketDetailModal');
    return null;
  }
  
  if (!users || !currentUser) {
    console.error('Missing users or currentUser in TicketDetailModal');
    return null;
  }
  
  try {
    const { updateTicket, passTicket, addComment, requestApproval, processApproval } = useSimulation();
  
    const [newComment, setNewComment] = useState('');
    const [showApprovalForm, setShowApprovalForm] = useState(false);
    const [showApprovalDropdown, setShowApprovalDropdown] = useState(false);
    const [selectedApprovers, setSelectedApprovers] = useState([]);
    const [approvalReason, setApprovalReason] = useState('');
    const [passToUser, setPassToUser] = useState('');
    const [passReason, setPassReason] = useState('');
    const [showPassForm, setShowPassForm] = useState(false);

  // New handler for dropdown approval
  const handleApprovalUserSelect = (userId) => {
    console.log('Requesting approval from:', userId);
    
    // Instant visual feedback - make dropdown button black
    const dropdownButton = document.querySelector('[data-action="request-approval"]');
    if (dropdownButton) {
      dropdownButton.style.backgroundColor = '#000000';
      dropdownButton.style.color = '#ffffff';
      dropdownButton.textContent = 'Approval Requested!';
      setTimeout(() => {
        dropdownButton.style.backgroundColor = '';
        dropdownButton.style.color = '';
        dropdownButton.textContent = 'Request Approval';
      }, 2000);
    }
    
    // Close dropdown immediately
    setShowApprovalDropdown(false);
    
    // Send approval request
    requestApproval(ticket.id, currentUser.id, `Approval requested for ticket ${ticket.id}`, userId);
    
    // Update ticket status
    updateTicket(ticket.id, { status: 'waiting_approval' });
    
    console.log('Approval request sent successfully');
  };

  const assignee = users.find(u => u.id === ticket.assignedTo);
  const creator = users.find(u => u.id === ticket.createdBy);
  const isAssignedToMe = ticket.assignedTo === currentUser.id;
  const canManage = currentUser.role === 'admin' || currentUser.isOrgOwner || currentUser.role === 'manager';
  const canApprove = canManage && ticket.status === 'waiting_approval';

  // Format work time from milliseconds to readable format
  const formatWorkTime = (milliseconds) => {
    const hours = Math.floor(milliseconds / (1000 * 60 * 60));
    const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
    return `${hours}h ${minutes}m`;
  };

  const handleStatusChange = (newStatus) => {
    updateTicket(ticket.id, { status: newStatus });
  };

  const handleAssignmentChange = (newAssigneeId) => {
    console.log('Assigning ticket to:', newAssigneeId);
    
    // Instant visual feedback - make clicked button black immediately
    const allButtons = document.querySelectorAll('[data-user-id]');
    allButtons.forEach(btn => {
      btn.style.backgroundColor = '';
      btn.style.color = '';
      btn.classList.remove('bg-black', 'text-white');
    });
    
    const clickedButton = document.querySelector(`[data-user-id="${newAssigneeId}"]`);
    if (clickedButton) {
      clickedButton.style.backgroundColor = '#000000';
      clickedButton.style.color = '#ffffff';
      clickedButton.style.transform = 'scale(0.95)';
      setTimeout(() => {
        clickedButton.style.transform = 'scale(1)';
      }, 150);
    }
    
    updateTicket(ticket.id, { 
      assignedTo: newAssigneeId,
      status: newAssigneeId ? 'assigned' : 'new'
    });
    
    console.log('Ticket assigned successfully');
  };

  const handleAddComment = () => {
    if (newComment.trim()) {
      console.log('Adding comment:', newComment);
      addComment(ticket.id, currentUser.id, newComment.trim());
      setNewComment('');
      
      // Show success feedback
      console.log('Comment added successfully');
    }
  };

  const handleStartWork = () => {
    console.log('Starting work on ticket:', ticket.id);
    
    // Add visual feedback
    const button = document.querySelector('[data-action="start-work"]');
    if (button) {
      button.style.backgroundColor = '#10b981';
      button.style.color = 'white';
      button.textContent = 'Work Started!';
      setTimeout(() => {
        button.style.backgroundColor = '';
        button.style.color = '';
        button.textContent = 'Start Work';
      }, 1000);
    }
    
    // Show immediate timestamp feedback
    const timeDisplay = document.querySelector('[data-time-display]');
    if (timeDisplay) {
      timeDisplay.innerHTML = `<div class="text-sm text-green-600">⏱️ Work started at ${new Date().toLocaleTimeString()}</div>`;
    }
    
    updateTicket(ticket.id, { 
      status: 'in_progress',
      workStarted: true,
      workStartedBy: currentUser.id
    });
    
    console.log('Work started successfully');
  };

  const handleStopWork = () => {
    console.log('Stopping work on ticket:', ticket.id);
    
    // Add visual feedback
    const button = document.querySelector('[data-action="stop-work"]');
    if (button) {
      button.style.backgroundColor = '#f59e0b';
      button.style.color = 'white';
      button.textContent = 'Work Stopped!';
      setTimeout(() => {
        button.style.backgroundColor = '';
        button.style.color = '';
        button.textContent = 'Stop Work';
      }, 1000);
    }
    
    // Show immediate timestamp feedback
    const timeDisplay = document.querySelector('[data-time-display]');
    if (timeDisplay) {
      const currentTime = new Date().toLocaleTimeString();
      const workDuration = ticket.currentWorkSession ? 
        Math.round((Date.now() - new Date(ticket.currentWorkSession.startTime).getTime()) / 60000) : 0;
      timeDisplay.innerHTML = `<div class="text-sm text-orange-600">⏹️ Work stopped at ${currentTime} (${workDuration} minutes)</div>`;
    }
    
    updateTicket(ticket.id, { 
      workStopped: true
    });
    
    console.log('Work stopped successfully');
  };

  const handleMarkComplete = () => {
    console.log('Marking ticket as complete:', ticket.id);
    
    // Add visual feedback
    const button = document.querySelector('[data-action="mark-complete"]');
    if (button) {
      button.style.backgroundColor = '#10b981';
      button.style.color = 'white';
      button.disabled = true;
      setTimeout(() => {
        button.style.backgroundColor = '';
        button.style.color = '';
      }, 1000);
    }
    
    updateTicket(ticket.id, { 
      status: 'completed'
    });
    
    console.log('Ticket marked as complete successfully');
  };

  const handleSendApprovalRequest = () => {
    if (selectedApprovers.length > 0) {
      // Send approval request to selected users
      selectedApprovers.forEach(approverId => {
        requestApproval(ticket.id, currentUser.id, approvalReason, approverId);
      });
      
      // Update ticket status
      updateTicket(ticket.id, { status: 'waiting_approval' });
      
      // Reset form
      setShowApprovalForm(false);
      setSelectedApprovers([]);
      setApprovalReason('');
    }
  };

  const handlePassTicket = () => {
    if (passToUser) {
      passTicket(ticket.id, currentUser.id, passToUser, passReason);
      setShowPassForm(false);
      setPassToUser('');
      setPassReason('');
    }
  };

  const handleRequestApproval = () => {
    requestApproval(ticket.id, currentUser.id, approvalReason);
    setShowApprovalForm(false);
    setApprovalReason('');
  };

  const handleApprovalDecision = (decision) => {
    processApproval(ticket.id, currentUser.id, decision, approvalReason);
    setApprovalReason('');
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'new': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'assigned': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'in_progress': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'waiting_approval': return 'bg-purple-100 text-purple-800 border-purple-200';
      case 'parked': return 'bg-gray-100 text-gray-800 border-gray-200';
      case 'completed': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'low': return 'bg-green-100 text-green-800 border-green-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'high': return 'bg-red-100 text-red-800 border-red-200';
      case 'critical': return 'bg-red-200 text-red-900 border-red-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
      <Card className="w-full max-w-4xl max-h-[90vh] overflow-hidden">
        <CardHeader className="border-b">
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-xl">{ticket.title}</CardTitle>
              <CardDescription>#{ticket.id} • Created {new Date(ticket.createdAt).toLocaleDateString()}</CardDescription>
            </div>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="w-4 h-4" />
            </Button>
          </div>
          
          {/* Status and Priority Badges */}
          <div className="flex items-center space-x-3 mt-4">
            <Badge className={`${getStatusColor(ticket.status)} border`}>
              {ticketStatuses[ticket.status]?.label || ticket.status}
            </Badge>
            <Badge className={`${getPriorityColor(ticket.priority)} border`}>
              {priorities[ticket.priority]?.label || ticket.priority}
            </Badge>
            {ticket.category && (
              <Badge variant="outline">{ticket.category}</Badge>
            )}
          </div>
        </CardHeader>

        <div className="flex-1 overflow-y-auto">
          {/* Tab Navigation */}
          <div className="border-b">
            <div className="flex space-x-8 px-6">
              {['details', 'comments', 'actions'].map((tab) => (
                <button
                  key={tab}
                  onClick={() => setActiveTab(tab)}
                  className={`py-4 px-1 border-b-2 font-medium text-sm ${
                    activeTab === tab
                      ? 'border-blue-500 text-blue-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700'
                  }`}
                >
                  {tab.charAt(0).toUpperCase() + tab.slice(1)}
                </button>
              ))}
            </div>
          </div>

          <div className="p-6">
            {/* Details Tab */}
            {activeTab === 'details' && (
              <div className="space-y-6">
                {/* Description */}
                <div>
                  <Label className="text-base font-medium">Description</Label>
                  <div className="mt-2 p-4 bg-gray-50 rounded-lg">
                    {ticket.description || 'No description provided'}
                  </div>
                </div>

                {/* Key Information */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label className="text-base font-medium">Assignment</Label>
                    <div className="mt-2 space-y-3">
                      <div className="flex items-center">
                        <User className="w-4 h-4 mr-2 text-gray-500" />
                        <span>
                          <strong>Assigned to:</strong> {assignee ? assignee.name : 'Unassigned'}
                        </span>
                      </div>
                      <div className="flex items-center">
                        <User className="w-4 h-4 mr-2 text-gray-500" />
                        <span>
                          <strong>Created by:</strong> {creator ? creator.name : 'Unknown'}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <Label className="text-base font-medium">Timeline</Label>
                    <div className="mt-2 space-y-3">
                      <div className="flex items-center">
                        <Clock className="w-4 h-4 mr-2 text-gray-500" />
                        <span>
                          <strong>Created:</strong> {new Date(ticket.createdAt).toLocaleString()}
                        </span>
                      </div>
                      <div className="flex items-center">
                        <Clock className="w-4 h-4 mr-2 text-gray-500" />
                        <span>
                          <strong>Updated:</strong> {new Date(ticket.updatedAt).toLocaleString()}
                        </span>
                      </div>
                      {ticket.dueDate && (
                        <div className="flex items-center">
                          <Clock className="w-4 h-4 mr-2 text-gray-500" />
                          <span>
                            <strong>Due:</strong> {new Date(ticket.dueDate).toLocaleString()}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Location */}
                {ticket.location && (
                  <div>
                    <Label className="text-base font-medium">Location</Label>
                    <div className="mt-2 flex items-center">
                      <MapPin className="w-4 h-4 mr-2 text-gray-500" />
                      {ticket.location}
                    </div>
                  </div>
                )}

                {/* Custom Fields */}
                {ticket.customFields && Object.keys(ticket.customFields).length > 0 && (
                  <div>
                    <Label className="text-base font-medium">Additional Information</Label>
                    <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-4">
                      {Object.entries(ticket.customFields).map(([key, value]) => (
                        <div key={key} className="flex justify-between">
                          <span className="font-medium capitalize">{key.replace(/([A-Z])/g, ' $1')}:</span>
                          <span>{value}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Workflow Stage */}
                {ticket.workflowStage && (
                  <div>
                    <Label className="text-base font-medium">Workflow Stage</Label>
                    <div className="mt-2">
                      <Badge variant="outline" className="text-sm">
                        {ticket.workflowStage.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                      </Badge>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Comments Tab */}
            {activeTab === 'comments' && (
              <div className="space-y-6">
                {/* Add Comment First */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Add Comment</CardTitle>
                    <CardDescription>Share updates, notes, or questions about this ticket</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      <Textarea
                        value={newComment}
                        onChange={(e) => setNewComment(e.target.value)}
                        placeholder="Write your comment here..."
                        rows={3}
                        className="resize-none"
                      />
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-500">
                          Commenting as {currentUser.name}
                        </span>
                        <Button 
                          onClick={handleAddComment} 
                          disabled={!newComment.trim()}
                          className="flex items-center"
                        >
                          <Send className="w-4 h-4 mr-2" />
                          Add Comment
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Comments List */}
                <div className="space-y-4">
                  <h3 className="text-lg font-medium">
                    Comments ({ticket.comments ? ticket.comments.length : 0})
                  </h3>
                  
                  {ticket.comments && ticket.comments.length > 0 ? (
                    <div className="space-y-4">
                      {ticket.comments
                        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
                        .map((comment) => (
                        <Card key={comment.id} className="border-l-4 border-l-blue-500">
                          <CardContent className="p-4">
                            <div className="flex items-start justify-between mb-3">
                              <div className="flex items-center space-x-3">
                                <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                                  <span className="text-white font-medium text-sm">
                                    {comment.authorName.charAt(0).toUpperCase()}
                                  </span>
                                </div>
                                <div>
                                  <div className="font-medium text-gray-900">{comment.authorName}</div>
                                  <div className="text-sm text-gray-500 flex items-center">
                                    <Clock className="w-3 h-3 mr-1" />
                                    {new Date(comment.createdAt).toLocaleString('en-US', {
                                      year: 'numeric',
                                      month: 'short',
                                      day: 'numeric',
                                      hour: '2-digit',
                                      minute: '2-digit'
                                    })}
                                  </div>
                                </div>
                              </div>
                              {comment.type === 'system' && (
                                <Badge variant="secondary" className="text-xs">
                                  <Settings className="w-3 h-3 mr-1" />
                                  System
                                </Badge>
                              )}
                            </div>
                            <div className="ml-13">
                              <p className="text-gray-700 whitespace-pre-wrap">{comment.content}</p>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  ) : (
                    <Card className="border-dashed">
                      <CardContent className="p-8 text-center">
                        <MessageSquare className="w-12 h-12 mx-auto text-gray-400 mb-4" />
                        <h3 className="text-lg font-medium text-gray-900 mb-2">No comments yet</h3>
                        <p className="text-gray-500">
                          Be the first to add a comment to this ticket. Share updates, ask questions, or provide additional context.
                        </p>
                      </CardContent>
                    </Card>
                  )}
                </div>
              </div>
            )}

            {/* Actions Tab */}
            {activeTab === 'actions' && (
              <div className="space-y-6">
                {/* Quick Actions */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Quick Actions</CardTitle>
                    <CardDescription>Common ticket operations</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                      {/* Start/Stop Work Button */}
                      {!ticket.currentWorkSession ? (
                        <Button 
                          variant="outline" 
                          onClick={handleStartWork}
                          data-action="start-work"
                          className="flex items-center justify-center hover:bg-green-50 hover:border-green-200 transition-all duration-200"
                        >
                          <Clock className="w-4 h-4 mr-2" />
                          Start Work
                        </Button>
                      ) : (
                        <Button 
                          variant="outline" 
                          onClick={handleStopWork}
                          data-action="stop-work"
                          className="flex items-center justify-center bg-orange-50 border-orange-200 hover:bg-orange-100 transition-all duration-200"
                        >
                          <Clock className="w-4 h-4 mr-2" />
                          Stop Work
                        </Button>
                      )}
                      
                      {/* Request Approval Dropdown */}
                      <div className="relative">
                        <Button 
                          variant="outline" 
                          onClick={() => setShowApprovalDropdown(!showApprovalDropdown)}
                          data-action="request-approval"
                          className="flex items-center justify-center hover:bg-purple-50 hover:border-purple-200 transition-all duration-200 w-full"
                        >
                          <AlertTriangle className="w-4 h-4 mr-2" />
                          Request Approval
                          <ChevronDown className="w-4 h-4 ml-2" />
                        </Button>
                        
                        {showApprovalDropdown && (
                          <div className="absolute top-full left-0 right-0 mt-1 bg-white border border-gray-200 rounded-md shadow-lg z-50">
                            <div className="p-2 text-sm text-gray-600 border-b">Select approver:</div>
                            {users.filter(user => user.role === 'admin' || user.role === 'manager').map((user) => (
                              <button
                                key={user.id}
                                onClick={() => handleApprovalUserSelect(user.id)}
                                className="w-full text-left px-3 py-2 hover:bg-gray-100 flex items-center transition-colors duration-150"
                              >
                                <User className="w-4 h-4 mr-2" />
                                {user.name} ({user.role})
                              </button>
                            ))}
                          </div>
                        )}
                      </div>
                      
                      <Button 
                        variant="outline" 
                        onClick={handleMarkComplete}
                        data-action="mark-complete"
                        disabled={ticket.status === 'completed'}
                        className="flex items-center justify-center col-span-1 sm:col-span-2 hover:bg-green-50 hover:border-green-200 transition-all duration-200 disabled:opacity-50"
                      >
                        <CheckCircle className="w-4 h-4 mr-2" />
                        Mark Complete
                      </Button>
                    </div>
                    
                    {/* Work Time Display */}
                    <div className="mt-4 p-3 bg-gray-50 rounded-lg" data-time-display>
                      <div className="text-sm font-medium text-gray-700">Work Time Tracking</div>
                      {ticket.totalWorkTime && (
                        <div className="text-sm text-gray-600">
                          Total Time: {formatWorkTime(ticket.totalWorkTime)}
                        </div>
                      )}
                      {ticket.currentWorkSession && (
                        <div className="text-sm text-green-600">
                          ⏱️ Currently working (started {new Date(ticket.currentWorkSession.startTime).toLocaleTimeString()})
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>

                {/* Quick Assignment */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Quick Assignment</CardTitle>
                    <CardDescription>Assign to team members</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      {users.map((user) => (
                        <Button
                          key={user.id}
                          variant={ticket.assignedTo === user.id ? "default" : "outline"}
                          onClick={() => handleAssignmentChange(user.id)}
                          data-user-id={user.id}
                          className="w-full justify-start text-left hover:scale-105 transition-all duration-200 hover:shadow-md"
                        >
                          <User className="w-4 h-4 mr-2 flex-shrink-0" />
                          <span className="truncate">{user.name} ({user.role})</span>
                          {ticket.assignedTo === user.id && (
                            <CheckCircle className="w-4 h-4 ml-auto flex-shrink-0" />
                          )}
                        </Button>
                      ))}
                      
                      <Button
                        variant={!ticket.assignedTo ? "default" : "outline"}
                        onClick={() => handleAssignmentChange('')}
                        data-user-id=""
                        className="w-full justify-start hover:scale-105 transition-all duration-200 hover:shadow-md"
                      >
                        <X className="w-4 h-4 mr-2" />
                        Unassign Ticket
                        {!ticket.assignedTo && (
                          <CheckCircle className="w-4 h-4 ml-auto" />
                        )}
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* Status Management */}
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Status Management</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label>Change Status</Label>
                      <Select value={ticket.status} onValueChange={handleStatusChange}>
                        <SelectTrigger className="mt-2">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {Object.entries(ticketStatuses).map(([key, status]) => (
                            <SelectItem key={key} value={key}>{status.label}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label>Priority Level</Label>
                      <Select value={ticket.priority} onValueChange={(priority) => updateTicket(ticket.id, { priority })}>
                        <SelectTrigger className="mt-2">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {Object.entries(priorities).map(([key, priority]) => (
                            <SelectItem key={key} value={key}>{priority.label}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </CardContent>
                </Card>

                {/* Request Approval Modal */}
                {showApprovalForm && (
                  <Card className="border-purple-200 bg-purple-50">
                    <CardHeader>
                      <CardTitle className="text-lg text-purple-800">Request Approval</CardTitle>
                      <CardDescription>Select users to request approval from</CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        <div>
                          <Label>Select Approvers</Label>
                          <div className="mt-2 space-y-2 max-h-40 overflow-y-auto">
                            {users.filter(u => u.role === 'admin' || u.role === 'manager').map((user) => (
                              <label key={user.id} className="flex items-center space-x-2 p-2 rounded border hover:bg-gray-50">
                                <input
                                  type="checkbox"
                                  checked={selectedApprovers.includes(user.id)}
                                  onChange={(e) => {
                                    if (e.target.checked) {
                                      setSelectedApprovers(prev => [...prev, user.id]);
                                    } else {
                                      setSelectedApprovers(prev => prev.filter(id => id !== user.id));
                                    }
                                  }}
                                  className="rounded"
                                />
                                <User className="w-4 h-4" />
                                <span>{user.name} ({user.role})</span>
                              </label>
                            ))}
                          </div>
                        </div>
                        
                        <div>
                          <Label>Approval Reason</Label>
                          <Textarea
                            value={approvalReason}
                            onChange={(e) => setApprovalReason(e.target.value)}
                            placeholder="Why do you need approval for this ticket?"
                            className="mt-2"
                          />
                        </div>
                        
                        <div className="flex space-x-3">
                          <Button 
                            onClick={handleSendApprovalRequest} 
                            disabled={selectedApprovers.length === 0}
                            className="flex-1"
                          >
                            <Mail className="w-4 h-4 mr-2" />
                            Send Request
                          </Button>
                          <Button 
                            variant="outline" 
                            onClick={() => {
                              setShowApprovalForm(false);
                              setSelectedApprovers([]);
                              setApprovalReason('');
                            }}
                          >
                            Cancel
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )}

                {/* Pass Ticket */}
                {isAssignedToMe && (
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Pass Ticket</CardTitle>
                      <CardDescription>
                        Transfer this ticket to another team member
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      {!showPassForm ? (
                        <Button onClick={() => setShowPassForm(true)}>
                          <ArrowRight className="w-4 h-4 mr-2" />
                          Pass to Another User
                        </Button>
                      ) : (
                        <div className="space-y-4">
                          <div>
                            <Label>Pass to User</Label>
                            <Select value={passToUser} onValueChange={setPassToUser}>
                              <SelectTrigger className="mt-2">
                                <SelectValue placeholder="Select user" />
                              </SelectTrigger>
                              <SelectContent>
                                {users.filter(u => u.id !== currentUser.id).map((user) => (
                                  <SelectItem key={user.id} value={user.id}>
                                    {user.name} ({user.role})
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                          </div>
                          
                          <div>
                            <Label>Reason (Optional)</Label>
                            <Textarea
                              value={passReason}
                              onChange={(e) => setPassReason(e.target.value)}
                              placeholder="Why are you passing this ticket?"
                              className="mt-2"
                            />
                          </div>
                          
                          <div className="flex space-x-3">
                            <Button onClick={handlePassTicket} disabled={!passToUser}>
                              <UserCheck className="w-4 h-4 mr-2" />
                              Pass Ticket
                            </Button>
                            <Button variant="outline" onClick={() => setShowPassForm(false)}>
                              Cancel
                            </Button>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}

                {/* Request Approval */}
                {isAssignedToMe && ticket.status !== 'waiting_approval' && (
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Request Approval</CardTitle>
                      <CardDescription>
                        Request manager approval for this ticket
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      {!showApprovalForm ? (
                        <Button onClick={() => setShowApprovalForm(true)}>
                          <AlertTriangle className="w-4 h-4 mr-2" />
                          Request Approval
                        </Button>
                      ) : (
                        <div className="space-y-4">
                          <div>
                            <Label>Approval Reason</Label>
                            <Textarea
                              value={approvalReason}
                              onChange={(e) => setApprovalReason(e.target.value)}
                              placeholder="Why do you need approval for this ticket?"
                              className="mt-2"
                            />
                          </div>
                          
                          <div className="flex space-x-3">
                            <Button onClick={handleRequestApproval}>
                              <Mail className="w-4 h-4 mr-2" />
                              Send Request
                            </Button>
                            <Button variant="outline" onClick={() => setShowApprovalForm(false)}>
                              Cancel
                            </Button>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}

                {/* Approval Actions */}
                {canApprove && (
                  <Card>
                    <CardHeader>
                      <CardTitle className="text-lg">Approval Required</CardTitle>
                      <CardDescription>
                        This ticket is waiting for your approval
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label>Approval Notes (Optional)</Label>
                        <Textarea
                          value={approvalReason}
                          onChange={(e) => setApprovalReason(e.target.value)}
                          placeholder="Add notes about your decision..."
                          className="mt-2"
                        />
                      </div>
                      
                      <div className="flex space-x-3">
                        <Button 
                          onClick={() => handleApprovalDecision('approved')}
                          className="bg-green-600 hover:bg-green-700"
                        >
                          <CheckCircle className="w-4 h-4 mr-2" />
                          Approve
                        </Button>
                        <Button 
                          variant="destructive"
                          onClick={() => handleApprovalDecision('denied')}
                        >
                          <X className="w-4 h-4 mr-2" />
                          Deny
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                )}

                {/* Email Notifications */}
                <Alert>
                  <Mail className="h-4 w-4" />
                  <AlertDescription>
                    Email notifications are automatically sent when tickets are assigned, passed, or require approval.
                    Check the email log in the main dashboard to see all notifications.
                  </AlertDescription>
                </Alert>
              </div>
            )}
          </div>
        </div>
      </Card>
    </div>
  );
  
  } catch (error) {
    console.error('Error in TicketDetailModal:', error);
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader>
            <CardTitle>Error Loading Ticket</CardTitle>
          </CardHeader>
          <CardContent>
            <p>There was an error loading the ticket details. Please try again.</p>
            <Button onClick={onClose} className="mt-4">Close</Button>
          </CardContent>
        </Card>
      </div>
    );
  }
}

